Docker Notes

1. Setup a Express Server
2. Build docker image
docker build .
docker build -t express-img .

3. list images
docker images

4. Run container once image is ready
docker run -d -p 3000:3000 --name express-container express-img
-d = detach mode
-p = port forwarding

5. Stop container
docker stop container-name

Stop & remove
docker rm container-name -f

6. Bind mount and sync volumes
For mac users
docker run -v "$(pwd)":/app -d -p 3000:3000 --name express-container express-img-wed

For windows - powershell
docker run -v "${pwd}:/app" -d -p 3000:3000 --name express-container express-img

7. Passing environment variables
docker run -v "$(pwd)":/app -d -p 3000:4000 --env PORT=4000 --name express-container express-img-wed

docker run -v "$(pwd)":/app -d -p 3000:4000 --env-file ./.env --name express-container express-img-wed
======================================

Start Docker Compose
- docker-compose up -d

Start Docker Compose and rebuild image
- docker-compose up -d --build

Down Docker Compose
- docker-compose down

Inside MongoDB container
- open Exec tab
- cd bin
- mongosh -u admin -p

Once you are connected to MongoDB
- test by creating database and collection

On VS Code terminal
- docker exec -it mongo-db-container-name bash
- cd bin
- mongosh -u admin -p

======================================

Running docker-compose in dev and prod environment

dev environment
- docker-compose -f docker-compose.dev.yaml -f docker-compose.yaml up -d

prod environment
- docker-compose -f docker-compose.prod.yaml -f docker-compose.yaml up -d

